// ---- Firebase (modular v11) ----
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-app.js";
import {
  getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword,
  signOut, deleteUser, onAuthStateChanged, updateProfile
} from "https://www.gstatic.com/firebasejs/11.0.1/firebase-auth.js";
import {
  getStorage, ref as storageRef, uploadBytes, getDownloadURL
} from "https://www.gstatic.com/firebasejs/11.0.1/firebase-storage.js";

// –í–ê–ñ–ù–û: –¥–æ–±–∞–≤—å github-–¥–æ–º–µ–Ω –≤ Firebase ‚Üí Auth ‚Üí Settings ‚Üí Authorized domains
const firebaseConfig = {
  apiKey: "AIzaSyBXZ1tN-J6vGZxVJL4BLND1XeiwT2T3OWQ",
  authDomain: "primedevices-5cdda.firebaseapp.com",
  projectId: "primedevices-5cdda",
  // –û–±—ã—á–Ω–æ —Ç—É—Ç appspot.com; –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ —É —Ç–µ–±—è –≤ –∫–æ–Ω—Å–æ–ª–∏:
  storageBucket: "primedevices-5cdda.firebasestorage.app",
  messagingSenderId: "563215884111",
  appId: "1:563215884111:web:e534e41afa4d4adad5ef3a"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const storage = getStorage(app);

// ---- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----
const TELEGRAM_TOKEN = "8060002374:AAGZ1B6fQutNTMMS22wOkgCH_defGVS8KVE";
const TELEGRAM_CHAT_ID = "-4885330608";

let cart = JSON.parse(localStorage.getItem("cart") || "[]");
let favorites = JSON.parse(localStorage.getItem("favorites") || "[]");
let orderHistory = JSON.parse(localStorage.getItem("orderHistory") || "[]");
let reviews = JSON.parse(localStorage.getItem("reviews") || "[]");

let tempReviewPhoto = null;      // base64 –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞
let tempAvatarFile = null;       // —Ñ–∞–π–ª –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ (–∂–¥—ë–º "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")

let currentPage = 1;
const perPage = 6;
let sortMode = "default";
let query = "";
let activeCategory = "all";

const fmt = n => n.toLocaleString("ru-RU");
const $ = id => document.getElementById(id);

// ---- –¢–æ–≤–∞—Ä—ã (–ø—Ä–∏–º–µ—Ä) ----
const products = [
  {
    name: "AirPods Pro 2 (LUX)",
    category: "airpods",
    price: 600,
    img: "img/airpods-pro2-lux.png.png",
    specs: ["–ê–∫—Ç–∏–≤–Ω–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ (ANC)","–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ä–µ–∂–∏–º","Bluetooth 5.3","–î–æ 6 —á–∞—Å–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã","–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∫–µ–π—Å"],
    memory: [{ size: "–ë–∞–∑–æ–≤–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", price: 600 }],
    colors: [{ name: "–ë–µ–ª—ã–π", color: "#ffffff", img: "img/airpods-pro2-lux.png.png" }]
  },
  {
    name: "AirPods Pro 2 (Premium)",
    category: "airpods",
    price: 700,
    img: "img/airpods-pro2-lux.png.png",
    specs: ["–ê–∫—Ç–∏–≤–Ω–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ (ANC)","–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫","–ö–µ–π—Å —Å –¥–∏–Ω–∞–º–∏–∫–æ–º –∏ –∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º","–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Find My","–î–æ 6 —á–∞—Å–æ–≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"],
    memory: [{ size: "–ë–∞–∑–æ–≤–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", price: 700 }],
    colors: [{ name: "–ë–µ–ª—ã–π", color: "#ffffff", img: "img/airpods-pro2-lux.png.png" }]
  },
  {
    name: "AirPods 3",
    category: "airpods",
    price: 650,
    img: "img/airpods-3.png (2).png",
    specs: ["–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥—Ä–∞–π–≤–µ—Ä Apple","–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–≤—É–∫–∞","–î–æ 6 —á–∞—Å–æ–≤ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è","–í–ª–∞–≥–æ–∑–∞—â–∏—Ç–∞ IPX4","–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∫–µ–π—Å MagSafe"],
    memory: [{ size: "–ë–∞–∑–æ–≤–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", price: 650 }],
    colors: [{ name: "–ë–µ–ª—ã–π", color: "#ffffff", img: "img/airpods-3.png (2).png" }]
  }
];

// ---- UI helpers ----
function showToast(message, type = "info") {
  const container = document.getElementById("toastContainer");
  const toast = document.createElement("div");
  toast.className = `toast ${type}`;
  toast.textContent = message;
  container.appendChild(toast);
  setTimeout(() => {
    toast.style.animation = "toastOut 0.4s ease forwards";
    setTimeout(() => toast.remove(), 400);
  }, 3000);
}

function saveState() {
  localStorage.setItem("cart", JSON.stringify(cart));
  localStorage.setItem("favorites", JSON.stringify(favorites));
  localStorage.setItem("orderHistory", JSON.stringify(orderHistory));
}

// ---- –ö–∞—Ç–∞–ª–æ–≥/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è/—Ä–µ–Ω–¥–µ—Ä ----
function getFiltered() {
  let list = products.slice();
  if (activeCategory !== "all") list = list.filter(p => p.category === activeCategory);
  if (query) list = list.filter(p => p.name.toLowerCase().includes(query));
  if (sortMode === "priceAsc") list.sort((a,b) => a.price - b.price);
  if (sortMode === "priceDesc") list.sort((a,b) => b.price - a.price);
  if (sortMode === "name") list.sort((a,b) => a.name.localeCompare(b.name, "ru"));
  return list;
}

function render() {
  const list = $("productList");
  list.classList.add("page-exit");
  setTimeout(() => {
    list.classList.remove("page-exit");
    list.innerHTML = "";
    const items = getFiltered();
    const totalPages = Math.max(1, Math.ceil(items.length / perPage));
    if (currentPage > totalPages) currentPage = totalPages;

    const start = (currentPage - 1) * perPage;
    const pageItems = items.slice(start, start + perPage);

    pageItems.forEach(p => {
      const idx = products.indexOf(p);
      const card = document.createElement("div");
      const favActive = favorites.find(f => f.name === p.name) ? "active" : "";
      card.className = "card";
      card.innerHTML = `
        <img src="${p.img}" alt="${p.name}" onclick="openProduct(${idx})">
        <h3>${p.name}</h3>
        <p class="price">${fmt(p.price)} MDL</p>
        <div style="display:flex;justify-content:center;gap:10px;">
          <button class="btn btn-primary" onclick="addToCart(${idx})">üß∫ –í –∫–æ—Ä–∑–∏–Ω—É</button>
          <button class="btn-fav ${favActive}" onclick="addToFavorites(${idx})">‚≠ê</button>
        </div>
      `;
      list.appendChild(card);
    });

    list.classList.add("page-enter");
    requestAnimationFrame(() => {
      list.classList.add("page-enter-active");
      list.classList.remove("page-enter");
      setTimeout(() => list.classList.remove("page-enter-active"), 500);
    });

    renderPagination(totalPages);
  }, 200);
}

function renderPagination(total) {
  const box = $("pagination");
  box.innerHTML = "";
  for (let i=1; i<=total; i++) {
    const b = document.createElement("button");
    b.className = "page-btn" + (i === currentPage ? " active" : "");
    b.textContent = i;
    b.onclick = () => { currentPage = i; render(); };
    box.appendChild(b);
  }
}

// ---- –ü–æ–∏—Å–∫/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ----
window.filterProducts = function() {
  query = $("searchInput").value.trim().toLowerCase();
  currentPage = 1;
  render();
};

(function initSort(){
  const dd = $("sortDropdown");
  const btn = $("sortBtn");
  const menu = $("sortMenu");
  btn.addEventListener("click", e => { e.stopPropagation(); dd.classList.toggle("open"); });
  menu.querySelectorAll("button").forEach(b => {
    b.addEventListener("click", () => {
      sortMode = b.dataset.sort;
      btn.textContent =
        sortMode === "priceAsc" ? "–¶–µ–Ω–∞ ‚Üë" :
        sortMode === "priceDesc" ? "–¶–µ–Ω–∞ ‚Üì" :
        sortMode === "name" ? "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é" : "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ‚ñæ";
      dd.classList.remove("open");
      render();
    });
  });
  document.addEventListener("click", () => dd.classList.remove("open"));
})();

document.querySelectorAll(".cat-btn").forEach(btn => {
  btn.addEventListener("click", () => {
    document.querySelectorAll(".cat-btn").forEach(b => b.classList.remove("active"));
    btn.classList.add("active");
    activeCategory = btn.dataset.cat;
    currentPage = 1;
    render();
  });
});

// ---- –ö–æ—Ä–∑–∏–Ω–∞ / –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ----
window.toggleCart = function() {
  const o = $("cartOverlay");
  o.style.display = o.style.display === "flex" ? "none" : "flex";
  renderCart();
};
window.addToCart = function(i) {
  cart.push({ ...products[i] });
  $("cartCount").textContent = cart.length;
  renderCart();
  document.getElementById("cartBtn").classList.add("pulse");
  setTimeout(() => document.getElementById("cartBtn").classList.remove("pulse"), 400);
  saveState();
};
window.removeFromCart = function(i) {
  cart.splice(i,1);
  $("cartCount").textContent = cart.length;
  renderCart();
  saveState();
};
window.clearCart = function() {
  cart = [];
  $("cartCount").textContent = 0;
  renderCart();
  saveState();
};
function renderCart() {
  const box = $("cartItems");
  box.innerHTML = "";
  let total = 0;
  cart.forEach((p,i) => {
    total += p.price;
    const row = document.createElement("div");
    row.className = "cart-item";
    row.innerHTML = `
      <img src="${p.img}" alt="">
      <div style="flex:1">
        <div style="font-weight:600">${p.displayName || p.name}</div>
        <div>${fmt(p.price)} MDL</div>
      </div>
      <button class="btn btn-danger" onclick="removeFromCart(${i})">‚úñ</button>
    `;
    box.appendChild(row);
  });
  $("totalPrice").textContent = fmt(total);
}

window.toggleFavorites = function() {
  const overlay = $("favOverlay");
  overlay.style.display = overlay.style.display === "flex" ? "none" : "flex";
  renderFavorites();
};
window.addToFavorites = function(i) {
  const p = products[i];
  const existing = favorites.find(f => f.name === p.name);
  if (!existing) {
    favorites.push(p);
    showToast("üíö –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", "success");
  } else {
    favorites = favorites.filter(f => f.name !== p.name);
    showToast("üíî –£–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "info");
  }
  $("favCount").textContent = favorites.length;
  render();
  saveState();
};
function renderFavorites() {
  const box = $("favItems");
  box.innerHTML = "";
  if (!favorites.length) {
    box.innerHTML = "<p>‚≠ê –ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.</p>";
    return;
  }
  favorites.forEach((p,i) => {
    const productIndex = products.findIndex(item => item.name === p.name);
    const row = document.createElement("div");
    row.className = "cart-item";
    row.innerHTML = `
      <img src="${p.img}" alt="${p.name}" onclick="openProduct(${productIndex})" style="cursor:pointer">
      <div style="flex:1;cursor:pointer" onclick="openProduct(${productIndex})">
        <div style="font-weight:600">${p.name}</div>
        <div>${fmt(p.price)} MDL</div>
      </div>
      <button class="btn btn-danger" onclick="removeFavorite(${i})">‚úñ</button>
    `;
    box.appendChild(row);
  });
}
window.removeFavorite = function(i){
  favorites.splice(i,1);
  $("favCount").textContent = favorites.length;
  renderFavorites();
  render();
  saveState();
};

// ---- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ ----
let modalState = { index:null, colorIdx:0, memIdx:0 };

window.openProduct = function(i){
  modalState = { index:i, colorIdx:0, memIdx:0 };
  const p = products[i];
  $("modalTitle").textContent = p.name;
  $("modalSpecs").innerHTML = p.specs.map(s => `<li>‚Ä¢ ${s}</li>`).join("");
  $("modalPrice").textContent = fmt(p.price) + " MDL";
  $("modalImg").src = p.img;

  const colorBox = $("colorOptions");
  colorBox.innerHTML = "";
  if (p.colors?.length) {
    p.colors.forEach((c,ci)=>{
      const chip = document.createElement("div");
      chip.className = "color-chip" + (ci===0 ? " active" : "");
      chip.style.backgroundColor = c.color;
      chip.title = c.name;
      chip.onclick = () => {
        colorBox.querySelectorAll(".color-chip").forEach(x => x.classList.remove("active"));
        chip.classList.add("active");
        modalState.colorIdx = ci;
        $("modalImg").src = c.img || p.img;
      };
      colorBox.appendChild(chip);
    });
  }

  const memBox = $("memoryOptions");
  memBox.innerHTML = "";
  const memory = p.memory?.length ? p.memory : [{ size:"–ë–∞–∑–æ–≤—ã–π", price:p.price }];
  memory.forEach((m,mi)=>{
    const b = document.createElement("button");
    b.className = "mem-btn" + (mi===0 ? " active" : "");
    b.textContent = m.size;
    b.onclick = () => {
      memBox.querySelectorAll(".mem-btn").forEach(x => x.classList.remove("active"));
      b.classList.add("active");
      modalState.memIdx = mi;
      $("modalPrice").textContent = fmt(memory[mi].price) + " MDL";
    };
    memBox.appendChild(b);
  });

  $("modalAddToCart").onclick = () => {
    const c = p.colors?.[modalState.colorIdx];
    const m = memory[modalState.memIdx];
    const price = m.price ?? p.price;
    const name = `${p.name}${c ? ` (${c.name}` : ""}${m ? `${c ? ", " : " ("}${m.size}` : ""}${(c||m) ? ")" : ""}`;
    cart.push({ ...p, price, displayName:name, img:c?.img || p.img });
    $("cartCount").textContent = cart.length;
    renderCart();
    closeModal();
    showToast("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", "success");
    saveState();
  };

  const favBtn = $("modalAddToFav");
  const isFav = favorites.find(f => f.name === p.name);
  if (isFav) { favBtn.classList.add("active"); favBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º"; }
  else       { favBtn.classList.remove("active"); favBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"; }

  $("productModal").style.display = "flex";
};
window.toggleModalFavorite = function(){
  const i = modalState.index;
  const p = products[i];
  const favBtn = $("modalAddToFav");
  const existing = favorites.find(f => f.name === p.name);
  if (!existing) {
    favorites.push(p);
    favBtn.classList.add("active");
    favBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º";
    showToast("üíö –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", "success");
  } else {
    favorites = favorites.filter(f => f.name !== p.name);
    favBtn.classList.remove("active");
    favBtn.textContent = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
    showToast("üíî –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "info");
  }
  $("favCount").textContent = favorites.length;
  render();
  saveState();
};
window.closeModal = function(){ $("productModal").style.display = "none"; };
window.placeOrder = function(){ if (!cart.length) return showToast("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", "info"); $("orderOverlay").style.display = "flex"; };
window.closeOrder = function(){ $("orderOverlay").style.display = "none"; };
window.overlayClick = function(e){ if (e.target.classList.contains("overlay")) e.target.style.display = "none"; };

// ---- –î–æ–º–æ–π / —Å—Ç—Ä–∞–Ω–∏—Ü—ã / –º–µ–Ω—é ----
window.goHome = function(){
  document.querySelectorAll('.overlay').forEach(el => el.style.display = 'none');
  query = ""; sortMode = "default"; activeCategory = "all";
  $("searchInput").value = ""; currentPage = 1;
  render(); window.scrollTo({top:0, behavior:"smooth"});
  showToast("üè† –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É","info");
};
window.showPage = function(page){
  const main = document.querySelector("main");
  const catalog = document.querySelector(".catalog");
  const headerBottom = document.querySelector(".header-bottom");
  const searchWrap = document.querySelector(".search-wrap");

  document.querySelectorAll(".page").forEach(p => p.style.display = "none");

  if (page === "shop") {
    if (main) main.style.display = "block";
    if (catalog) catalog.style.display = "flex";
    if (headerBottom) headerBottom.style.display = "flex";
    if (searchWrap) searchWrap.style.display = "flex";
  } else {
    if (main) main.style.display = "none";
    if (catalog) catalog.style.display = "none";
    if (headerBottom) headerBottom.style.display = "none";
    if (searchWrap) searchWrap.style.display = "none";
  }

  const target = document.getElementById(`page-${page}`);
  if (target) target.style.display = "block";

  if (page === "orders") renderOrders();
  if (page === "reviews") renderReviews();

  window.scrollTo({ top: 0, behavior: "smooth" });
};
window.toggleMenu = function(){
  document.querySelector('.top-nav').classList.toggle('active');
};

// ---- –¢–µ–º–∞ ----
document.addEventListener("DOMContentLoaded", () => {
  const themeBtn = $("themeToggle");
  const root = document.documentElement;
  const savedTheme = localStorage.getItem("theme");
  if (savedTheme === "light") { root.classList.add("light-theme"); themeBtn.textContent = "üåû"; }
  else themeBtn.textContent = "üåô";

  themeBtn.addEventListener("click", () => {
    root.classList.toggle("light-theme");
    const isLight = root.classList.contains("light-theme");
    themeBtn.textContent = isLight ? "üåû" : "üåô";
    localStorage.setItem("theme", isLight ? "light" : "dark");
  });
});

// ---- –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ ----
function saveOrderHistory(){ localStorage.setItem("orderHistory", JSON.stringify(orderHistory)); }
function renderOrders(){
  const box = $("ordersList");
  box.innerHTML = "";
  if (!orderHistory.length) { box.innerHTML = "<p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üõç</p>"; return; }
  orderHistory.slice().reverse().forEach((order,i)=>{
    const div = document.createElement("div");
    div.className = "order-card";
    const items = order.items.map(x => `‚Ä¢ ${x}`).join("<br>");
    div.innerHTML = `
      <h3>–ó–∞–∫–∞–∑ ‚Ññ${i + 1}</h3>
      <p><b>–î–∞—Ç–∞:</b> ${order.date}</p>
      <p><b>–ò–º—è:</b> ${order.name}</p>
      <p><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone}</p>
      <p><b>–¢–æ–≤–∞—Ä—ã:</b><br>${items}</p>
      <p><b>–°—É–º–º–∞:</b> ${order.total} MDL</p>
    `;
    box.appendChild(div);
  });
}

// ---- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (Telegram) ----
window.sendOrder = async function() {
  const user = auth.currentUser;
  const name = $("orderName").value.trim();
  const phone = $("orderPhone").value.trim();
  const comment = $("orderComment").value.trim();

  if (!user) {
    $("cartOverlay").style.display = "none";
    $("orderOverlay").style.display = "none";
    showToast("üîí –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!", "error");
    showPage("account");
    return;
  }
  if (!name || !phone) return showToast("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!", "error");
 // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ú–æ–ª–¥–æ–≤—ã (+373 –∏ 8 —Ü–∏—Ñ—Ä)
const phoneRegex = /^\+373(6|7|8)\d{7}$/;
if (!phoneRegex.test(phone)) {
  return showToast("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ú–æ–ª–¥–æ–≤—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ +373XXXXXXXX", "error");
}


  if (!cart.length) return showToast("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", "info");

  const itemsText = cart.map((p,i)=>`${i+1}. ${p.displayName || p.name} ‚Äî ${fmt(p.price)} MDL`).join("\n");
  const text = `
üßæ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ PrimeDevices.pmr</b>
üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || "‚Äî"}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${itemsText}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –ò—Ç–æ–≥–æ: ${$("totalPrice").textContent} MDL
`;

  try {
    const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`,{
      method:"POST",
      headers:{"Content-Type":"application/json"},
      body:JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode:"HTML" })
    });
    const data = await res.json();
    if (res.ok && data.ok) {
      const orderData = {
        date: new Date().toLocaleString(),
        name, phone, comment,
        items: cart.map(p => p.displayName || p.name),
        total: $("totalPrice").textContent
      };
      orderHistory.push(orderData);
      saveOrderHistory();

      showToast("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", "success");
      $("orderOverlay").style.display = "none";
      cart = []; $("cartCount").textContent = 0;
      renderCart(); saveState();
    } else {
      console.error("–û—à–∏–±–∫–∞ Telegram:", data);
      showToast("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞!", "error");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", err);
    showToast("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ!", "error");
  }
};

// ---- –û—Ç–∑—ã–≤—ã ----
window.previewReviewPhoto = function(e){
  const file = e.target.files[0]; if (!file) return;
  const reader = new FileReader();
  reader.onload = ev => {
    tempReviewPhoto = ev.target.result;
    $("reviewPreview").innerHTML = `
      <img src="${tempReviewPhoto}" alt="–§–æ—Ç–æ –æ—Ç–∑—ã–≤–∞"
           style="max-width:150px; border-radius:10px; margin-top:8px; border:2px solid var(--accent);">
    `;
  };
  reader.readAsDataURL(file);
};

window.addReview = function(){
  const user = auth.currentUser;
  const name = $("reviewName").value.trim();
  const text = $("reviewText").value.trim();

  if (!name || !text) return showToast("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–∫—Å—Ç!", "error");
  if (!user) {
    showToast("üîí –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!", "error");
    showPage("account");
    return;
  }

  const newReview = {
    name,
    text,
    email: user.email,
    date: new Date().toLocaleDateString("ru-RU", { day:"2-digit", month:"long", year:"numeric" }),
    photo: tempReviewPhoto || null
  };

  reviews.push(newReview);
  localStorage.setItem("reviews", JSON.stringify(reviews));

  $("reviewName").value = "";
  $("reviewText").value = "";
  $("reviewPhoto").value = "";
  $("reviewPreview").innerHTML = "";
  tempReviewPhoto = null;

  showToast("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", "success");
  renderReviews();
};

function renderReviews(){
  const box = $("reviewsList");
  box.innerHTML = "";
  if (!reviews.length) { box.innerHTML = "<p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º! üåü</p>"; return; }
  const user = auth.currentUser;
  reviews.forEach((r,i) => {
    const card = document.createElement("div");
    card.className = "review-card";
    const canDelete = user && user.email === r.email;
    const del = canDelete ? `<button class="btn btn-danger" style="margin-top:10px;" onclick="deleteReview(${i})">üóë –£–¥–∞–ª–∏—Ç—å</button>` : "";
    card.innerHTML = `
      <p><b>${r.name}</b> <span style="opacity:0.7;">(${r.date})</span></p>
      <p>${r.text}</p>
      ${r.photo ? `<img src="${r.photo}" alt="–§–æ—Ç–æ –æ—Ç–∑—ã–≤–∞"
         style="max-width:150px; border-radius:10px; margin-top:8px; border:2px solid var(--accent);">` : ""}
      ${del}
    `;
    box.prepend(card);
  });
}
window.deleteReview = function(index){
  const user = auth.currentUser;
  if (!user) return showToast("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!", "error");
  const review = reviews[index];
  if (review.email !== user.email) return showToast("üö´ –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –æ—Ç–∑—ã–≤!", "error");
  if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?")) return;
  reviews.splice(index,1);
  localStorage.setItem("reviews", JSON.stringify(reviews));
  showToast("üóë –û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω!", "success");
  renderReviews();
};

// ---- –ê–∫–∫–∞—É–Ω—Ç (Firebase Auth) ----
window.toggleAuth = function(mode){
  $("loginBox").style.display = mode === "register" ? "none" : "block";
  $("registerBox").style.display = mode === "register" ? "block" : "none";
};

window.registerUser = async function(){
  const email = $("regEmail").value.trim();
  const pass = $("regPass").value.trim();
  const name = $("regName").value.trim();
  if (!email || !pass) return showToast("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å", "error");

  try {
    const cred = await createUserWithEmailAndPassword(auth, email, pass);
    if (name) {
      await updateProfile(cred.user, { displayName: name });
    }
    showToast("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –≤–æ—à–ª–∏.", "success");
  } catch (err) {
    alert("–û—à–∏–±–∫–∞: " + err.message);
  }
};

window.loginUser = async function(){
  const email = $("loginEmail").value.trim();
  const pass = $("loginPass").value.trim();
  if (!email || !pass) return showToast("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å", "error");
  try {
    await signInWithEmailAndPassword(auth, email, pass);
    showToast("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!", "success");
  } catch (err) {
    alert("–û—à–∏–±–∫–∞: " + err.message);
  }
};

window.logoutUser = async function(){
  await signOut(auth);
  showToast("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", "info");
};

window.deleteAccount = async function(){
  if (!confirm("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–≤—Å–µ–≥–¥–∞?")) return;
  const user = auth.currentUser;
  if (!user) return;
  try {
    await deleteUser(user);
    showToast("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω", "success");
  } catch (e) {
    alert("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + e.message);
  }
};

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
window.toggleEdit = function(){
  const box = $("editProfileBox");
  box.style.display = (box.style.display === "none" || !box.style.display) ? "block" : "none";
};
window.cancelEdit = function(){
  $("editProfileBox").style.display = "none";
  tempAvatarFile = null;
};
window.changeAvatar = function(e){
  const file = e.target.files[0];
  if (!file) return;
  tempAvatarFile = file; // —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  const reader = new FileReader();
  reader.onload = ev => { $("userAvatar").src = ev.target.result; };
  reader.readAsDataURL(file);
  showToast("üì∑ –§–æ—Ç–æ –≤—ã–±—Ä–∞–Ω–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.", "info");
};

window.saveProfile = async function(){
  const user = auth.currentUser;
  if (!user) return showToast("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏!", "error");

  const newName = $("editName").value.trim();
  let changed = false;

  try {
    // 1) –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä, –≥—Ä—É–∑–∏–º –≤ Firebase Storage
    if (tempAvatarFile) {
      const ext = (tempAvatarFile.name.split(".").pop() || "jpg").toLowerCase();
      const ref = storageRef(storage, `avatars/${user.uid}.${ext}`);
      await uploadBytes(ref, tempAvatarFile);
      const url = await getDownloadURL(ref);
      await updateProfile(user, { photoURL: url });
      tempAvatarFile = null;
      changed = true;
    }

    // 2) –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if (newName) {
      await updateProfile(user, { displayName: newName });
      changed = true;
    }

    if (changed) {
      showToast("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
      $("editProfileBox").style.display = "none";
      refreshUserPanel(); // –æ–±–Ω–æ–≤–∏—Ç—å UI
    } else {
      showToast("‚ö†Ô∏è –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", "error");
    }
  } catch (e) {
    alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: " + e.message);
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function refreshUserPanel(){
  const user = auth.currentUser;
  if (!user) return;

  const name = user.displayName || (user.email ? user.email.split("@")[0] : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
  $("userName").textContent = name;

  if (user.photoURL) {
    $("userAvatar").src = user.photoURL;
  } else {
    const letter = name.charAt(0).toUpperCase();
    $("userAvatar").src = `https://dummyimage.com/200x200/1c79ff/ffffff&text=${letter}`;
  }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–∞
onAuthStateChanged(auth, (user) => {
  const loginBox = $("loginBox");
  const registerBox = $("registerBox");
  const userPanel = $("userPanel");

  if (user) {
    loginBox.style.display = "none";
    registerBox.style.display = "none";
    userPanel.style.display = "block";
    refreshUserPanel();
  } else {
    loginBox.style.display = "block";
    registerBox.style.display = "none";
    userPanel.style.display = "none";
  }
  // –ø—Ä–∏ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
  if (document.getElementById("page-reviews").style.display === "block") {
    renderReviews();
  }
});

// ---- DOM ready ----
document.addEventListener("DOMContentLoaded", () => {
  $("cartCount").textContent = cart.length;
  $("favCount").textContent = favorites.length;

  render();
  showPage("shop");

  // –∑–∞–∫—Ä—ã—Ç–∏–µ –±—É—Ä–≥–µ—Ä–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
  const nav = document.querySelector('.top-nav');
  const burger = document.querySelector('.burger');
  document.querySelectorAll('.top-nav .nav-btn').forEach(btn => {
    btn.addEventListener('click', () => nav.classList.remove('active'));
  });
  document.addEventListener('click', (e) => {
    if (!nav.contains(e.target) && !burger.contains(e.target)) {
      nav.classList.remove('active');
    }
  });

  // —Å—Ä–∞–∑—É –æ—Ç—Ä–∏—Å—É–µ–º –æ—Ç–∑—ã–≤—ã, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞
  renderReviews();
});

// === –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫–∞–ø–ª—è–º–∏ ===
const canvas = document.getElementById("bubbles");
const ctx = canvas.getContext("2d");
let drops = [];

function resizeCanvas() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}
resizeCanvas();
window.addEventListener("resize", resizeCanvas);

// —Å–æ–∑–¥–∞—ë–º –∫–∞–ø–ª–∏
for (let i = 0; i < 25; i++) {
  drops.push({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    r: Math.random() * 200 + 80,
    dx: (Math.random() - 0.5) * 0.4,
    dy: (Math.random() - 0.5) * 0.4,
    color: `hsl(${Math.random() * 360}, 80%, 60%)`
  });
}

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  drops.forEach(d => {
    ctx.beginPath();
    const gradient = ctx.createRadialGradient(d.x, d.y, d.r * 0.2, d.x, d.y, d.r);
    gradient.addColorStop(0, d.color);
    gradient.addColorStop(1, "transparent");
    ctx.fillStyle = gradient;
    ctx.fill();

    d.x += d.dx;
    d.y += d.dy;

    // –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –∫—Ä–∞—ë–≤
    if (d.x - d.r < 0 || d.x + d.r > canvas.width) d.dx *= -1;
    if (d.y - d.r < 0 || d.y + d.r > canvas.height) d.dy *= -1;
  });

  requestAnimationFrame(animate);
}
animate();

